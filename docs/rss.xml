<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Stargazing Adventures</title><link>https://xiaosy-astro.github.io</link><description>记录一些有用的教程</description><copyright>Stargazing Adventures</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://xiaosy-astro.github.io</link></image><lastBuildDate>Wed, 27 Aug 2025 10:55:56 +0000</lastBuildDate><managingEditor>Stargazing Adventures</managingEditor><ttl>60</ttl><webMaster>Stargazing Adventures</webMaster><item><title>反射模型：a）灯柱模型； b）弥漫的冕模型。</title><link>https://xiaosy-astro.github.io/post/fan-she-mo-xing-%EF%BC%9Aa%EF%BC%89-deng-zhu-mo-xing-%EF%BC%9B%20b%EF%BC%89-mi-man-de-mian-mo-xing-%E3%80%82.html</link><description>

&lt;img alt='Image' src='https://github.com/user-attachments/assets/f237b8ec-31bd-4b54-89b8-099ae158717d' /&gt;

几乎总是存在的特征光谱特征之一是幂律成分。</description><guid isPermaLink="true">https://xiaosy-astro.github.io/post/fan-she-mo-xing-%EF%BC%9Aa%EF%BC%89-deng-zhu-mo-xing-%EF%BC%9B%20b%EF%BC%89-mi-man-de-mian-mo-xing-%E3%80%82.html</guid><pubDate>Wed, 27 Aug 2025 07:52:22 +0000</pubDate></item><item><title>IXPE观测到的黑洞X射线双星</title><link>https://xiaosy-astro.github.io/post/IXPE-guan-ce-dao-de-hei-dong-X-she-xian-shuang-xing.html</link><description>### IXPE在其任务的前2.5年中观测到的所有黑洞X射线双星

&lt;img width='482' height='244' alt='Image' src='https://github.com/user-attachments/assets/c5edc004-49e3-4fa9-802e-12a7d58ccb49' /&gt;

原文链接 [IXPE View of BH XRBs during the First 2.5 Years of the Mission](https://www.mdpi.com/2075-4434/12/5/54)

### Python将该图复现

```python
import numpy as np
from astropy.coordinates import SkyCoord
import astropy.units as u
from dustmaps.sfd import SFDQuery
import matplotlib.pyplot as plt
plt.style.use('https://raw.githubusercontent.com/wangboting/python-style/main/pythonstyle.style')
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['font.size'] = 12
plt.rcParams['font.family'] = 'Times New Roman'

from dustmaps.sfd import SFDQuery



# 初始化 SFD
sfd = SFDQuery()

# 在银道坐标系中采样
l = np.linspace(-180, 180, 1000)
b = np.linspace(-90, 90, 500)
ll, bb = np.meshgrid(l, b)
coords = SkyCoord(l=-ll*u.deg, b=bb*u.deg, frame='galactic')
ebv = sfd(coords)   # 得到 E(B−V) 值

# 画 Mollweide 投影
plt.figure(figsize=(10,5))
ax = plt.subplot(111, projection='mollweide')
im = ax.pcolormesh(np.radians((ll)), np.radians(bb), ebv,
                   shading='auto', cmap='Blues', vmin=0, vmax=2,alpha=0.9)

plt.colorbar(im, orientation='vertical', pad=0.05, label='E(B-V)',location='right',extend='max')
ax.tick_params(axis='both', colors='red')
xtick_locs = np.radians([-150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150])  # Radians for plotting
xtick_labels = ['150°', '120°', '90°', '60°', '30°', '0°', '330°', '300°', '270°', '240°', '210°']
ax.set_xticks(xtick_locs)
ax.set_xticklabels(xtick_labels)
ax.set_xlabel('l [deg]')
ax.set_ylabel('b [deg]')
ax.grid(True)
def wrap_l(l):
    return 360-l if l &gt; 180 else -l
# 定义源的信息：名字、l、b、颜色
sources = [
    ('Cyg X-1',        71.3349982655144,  +3.0668346317201, 'orange'),
    ('Cyg X-3',        79.84549,          +0.70006,         'blue'),
    ('LMC X-1',       280.2030024388124, -31.5158204428701, 'green'),
    ('LMC X-3',       273.5764427008667, -32.0814329516362, 'red'),
    ('4U 1957+115',    51.3076815317130,  -9.3301753261750, 'purple'),
    ('SS 433',         39.6941044854067,  -2.2445979222389, 'yellow'),
    ('Swift J1727.8-1613',  8.64165916,  +10.2553516,       'pink'),
    ('GX 339-4',      338.9391581007216,  -4.3264729352953, 'brown'),
    ('4U 1630-47',    336.911278,         +0.250229,        'skyblue'),
    ('Swift J151857.0–572147', 321.815571, -0.00253675,     'cyan'),
]

# 统一绘制
for name, l, b, color in sources:
    ax.scatter(
        np.radians(wrap_l(l)), np.radians(b),
        color=color, marker='*', s=150,
        edgecolors='black', linewidths=0.8,
        label=name
    )

# 图例
ax.legend(
    loc='upper center',
    bbox_to_anchor=(0.5, -0.1),  # 横向居中，纵向往下挪
    fontsize='small',
    ncol=4,
    frameon=False
)
plt.savefig('All_BH_XRBs_observed_by_IXPE.pdf',dpi=400,bbox_inches='tight')
plt.show()
```

### 结果

&lt;img width='723' height='427' alt='Image' src='https://github.com/user-attachments/assets/c913c5ed-1b24-499a-ad5c-40770c8a9161' /&gt;

### 最新结果

&lt;img width='723' height='430' alt='Image' src='https://github.com/user-attachments/assets/393a5a54-96b0-4f4a-8b00-de04bc1214c4' /&gt;。</description><guid isPermaLink="true">https://xiaosy-astro.github.io/post/IXPE-guan-ce-dao-de-hei-dong-X-she-xian-shuang-xing.html</guid><pubDate>Tue, 26 Aug 2025 03:26:37 +0000</pubDate></item><item><title>FXT的流量转流量密度</title><link>https://xiaosy-astro.github.io/post/FXT-de-liu-liang-zhuan-liu-liang-mi-du.html</link><description>### 定义流量转流量密度的计算的函数

```python
import os
import numpy as np
import pandas as pd
from astropy.io import fits
from astropy.time import Time
import pprint
def compute_integral_energy(beta, E1, E2):
    if beta == 1:
        return np.log(E2 / E1)
    else:
        return (E2**(1 - beta) - E1**(1 - beta)) / (1 - beta)

def compute_energy_flux_density_and_error(F, sigma_F, beta, sigma_beta, E1, E2, E_obs):
    integral = compute_integral_energy(beta, E1, E2)
    e_term = E_obs ** (-beta)
    f_E = F / integral * e_term
    df_dF = e_term / integral
    df_dbeta = -np.log(E_obs) * F / integral * e_term
    sigma_f_E = np.sqrt((df_dF * sigma_F)**2 + (df_dbeta * sigma_beta)**2)
    return f_E, sigma_f_E  # 单位：erg/cm²/s/keV

def compute_xray_energy_flux_density(
    input_fits,
    output_file, t0_iso,
    beta_X=1.9,
    sigma_beta_X=0.2,
    E1=0.3,  # keV
    E2=10.0,  # keV
    E_obs=1.0,  # keV
    rate_to_flux=1e-11
):
    '''  
        从 Swift-XRT 光变 FITS 计算 X-ray flux density（单位 mJy）及误差，并保存到文件。</description><guid isPermaLink="true">https://xiaosy-astro.github.io/post/FXT-de-liu-liang-zhuan-liu-liang-mi-du.html</guid><pubDate>Sun, 17 Aug 2025 12:11:02 +0000</pubDate></item><item><title>precursor 和 main burst示意图</title><link>https://xiaosy-astro.github.io/post/precursor%20-he-%20main%20burst-shi-yi-tu.html</link><description>代码：

```python
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('https://github.com/xiaosy-astro/python-style/blob/main/pythonstyle.style')
plt.rcParams['font.sans-serif'] = ['SimSun']
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['font.size'] = 12
plt.rcParams['font.family'] = 'Times New Roman'

# 时间轴
t = np.linspace(-50, 100, 500)

# 背景噪声
np.random.seed(42)
background = np.random.normal(0, 0.1, len(t))

# 模拟前驱辐射 (precursor)
prec_peak_time = 0
prec_width = 3
prec_amplitude = 1.2
prec_signal = prec_amplitude * np.exp(-(t - prec_peak_time)**2 / (2 * prec_width**2))

# 模拟主暴发 (main burst)
main_peak_time = 80
main_width = 6
main_amplitude = 3.5
main_signal = main_amplitude * np.exp(-(t - main_peak_time)**2 / (2 * main_width**2))

# 总光变曲线
counts = background + prec_signal + main_signal

# 关键参数（用于标注）
R_prec = prec_amplitude
R_main = main_amplitude
tau_prec = 2 * prec_width
tau_main = 2 * main_width

t_start_prec = prec_peak_time - prec_width
t_end_prec   = prec_peak_time + prec_width
t_start_main = main_peak_time - main_width
t_end_main   = main_peak_time + main_width

dt_pk  = main_peak_time - prec_peak_time
dt_det = t_start_main - t_end_prec

# 画图（阶梯状）
plt.figure(figsize=(7, 5))
plt.step(t, counts, color='black', lw=1, where='mid')

# 新的竖线位置
vline_prec_start = t_start_prec - 4
vline_prec_end   = t_end_prec + 4
vline_main_start = t_start_main - 9
vline_main_end   = t_end_main + 5

# 竖虚线：前驱 / 主峰的 start/end
# 竖虚线
for x in (vline_prec_start, vline_prec_end, vline_main_start, vline_main_end):
    plt.axvline(x, ls='--', color='gray', lw=0.9)


for x in (prec_peak_time, main_peak_time):
    plt.axvline(x, ls='--', color='blue', lw=0.3)
# 水平虚线：R_prec / R_main
plt.hlines(R_prec+0.2, t.min(), prec_peak_time, colors='red', linestyles='--', lw=0.9)
plt.hlines(R_main+0.15, main_peak_time, t.max(), colors='red', linestyles='--', lw=0.9)

# ylim 便于放置标注（与原图类似的上下边距）
ymin = -1.0
ymax = R_main + 1.0
plt.ylim(ymin, ymax)

# --- τ 标注：用弧形双箭头放在曲线下方 ---
y_tau = ymin + 0.25  # 放在下方（与图中弧形类似）
# precursor duration arc
plt.annotate(
    '', xy=(vline_prec_start, y_tau), xytext=(vline_prec_end, y_tau),
    arrowprops=dict(arrowstyle='&lt;-&gt;', lw=1.2, connectionstyle='arc3,rad=-0.3')
)
plt.text((vline_prec_start + vline_prec_end)/2, y_tau+0.1, r'$\tau_{\rm prec}$', ha='center', va='top')

plt.annotate(
    '', xy=(vline_main_start, y_tau), xytext=(vline_main_end, y_tau),
    arrowprops=dict(arrowstyle='&lt;-&gt;', lw=1.2, connectionstyle='arc3,rad=-0.3')
)
plt.text((vline_main_start + vline_main_end)/2, y_tau+0.1, r'$\tau_{\rm main}$', ha='center', va='top')

# --- Δt_pk 标注：峰与峰之间的双箭头（放在上方） ---
y_pk = R_main + 0.35
plt.annotate(
    '', xy=(prec_peak_time, y_pk), xytext=(main_peak_time, y_pk),
    arrowprops=dict(arrowstyle='&lt;-&gt;', lw=1.2,color='blue')
)
plt.text((prec_peak_time + main_peak_time)/2, y_pk + 0.04, r'$\Delta t_{\rm pk}$', ha='center', va='bottom',color='blue')

# --- Δt_det 标注：前驱结束与主峰开始之间的双箭头（放在 Δt_pk 之下） ---
y_det = R_main + 0.15
plt.annotate(
    '', xy=(vline_prec_end, y_det), xytext=(vline_main_start, y_det),
    arrowprops=dict(arrowstyle='&lt;-&gt;', lw=1.2)
)
plt.text((vline_prec_end + vline_main_start)/2, y_det - 0.3, r'$\Delta t_{\rm q}$', ha='center', va='bottom')
# 标注 R_prec / R_main 的文字
plt.text(t.min() + 2, R_prec + 0.2, r'$R_{\rm prec}$', va='bottom', color='red')
plt.text(t.max() + 1, R_main + 0.2, r'$R_{\rm main}$', va='bottom', ha='right', color='red')

# 轴与外观
plt.xlabel(r'Time (s) $\rightarrow$')
plt.ylabel(r'Counts s$^{-1}$ $\rightarrow$')
plt.yticks([])
plt.xticks([])
plt.tight_layout()
plt.savefig('lightcurve_prec_main_demo.pdf', dpi=400, bbox_inches='tight') 
plt.show()
```

![Image](https://github.com/user-attachments/assets/9591562b-2537-4dfb-96bf-45a38dea2d55)

- $R_{\mathrm{prec}}$: peak count rate of the first episode of emission  
- $R_{\mathrm{main}}$: peak count rate of the main episode of emission  
- $\tau_{\mathrm{prec}}$: duration of the precursor episode emission  
- $\tau_{\mathrm{main}}$: duration of the main episode emission  
- $\Delta t_{\mathrm{pk}}$: the separation time between the $R_{\mathrm{prec}}$ and $R_{\mathrm{main}}$  
- $\Delta t_q$: the quiescent time  
。</description><guid isPermaLink="true">https://xiaosy-astro.github.io/post/precursor%20-he-%20main%20burst-shi-yi-tu.html</guid><pubDate>Tue, 12 Aug 2025 13:04:47 +0000</pubDate></item><item><title>如何在六个月内学会任何一门外语</title><link>https://xiaosy-astro.github.io/post/ru-he-zai-liu-ge-yue-nei-xue-hui-ren-he-yi-men-wai-yu.html</link><description>&gt; [!NOTE]
&gt; 学会一门外语，对大多数人来说都需要花费好几年的时间。</description><guid isPermaLink="true">https://xiaosy-astro.github.io/post/ru-he-zai-liu-ge-yue-nei-xue-hui-ren-he-yi-men-wai-yu.html</guid><pubDate>Fri, 08 Aug 2025 13:55:28 +0000</pubDate></item><item><title>EP/FXT 提取光变和能谱数据产品</title><link>https://xiaosy-astro.github.io/post/EP-FXT%20-ti-qu-guang-bian-he-neng-pu-shu-ju-chan-pin.html</link><description>&gt; [!IMPORTANT]
&gt; 本教程是在给定坐标下， 从EP/FXT的用户数据中，提取其能谱和光变曲线产品，并自动生成两个能谱拟合xcm文件，一个是联合拟合，一个是单个拟合，只需要输入拟合的模型即可。</description><guid isPermaLink="true">https://xiaosy-astro.github.io/post/EP-FXT%20-ti-qu-guang-bian-he-neng-pu-shu-ju-chan-pin.html</guid><pubDate>Fri, 08 Aug 2025 09:27:28 +0000</pubDate></item><item><title>EP_WXT_data_analysis</title><link>https://xiaosy-astro.github.io/post/EP_WXT_data_analysis.html</link><description>目标：流水线产品不可用，我需要重新提取数据，每一次观测数据含有event文件，需要通过xselect软件从event中提取数据产品，数据产品包括能谱（包括源和背景能谱）和光变曲线（源和背景的光变曲线）。</description><guid isPermaLink="true">https://xiaosy-astro.github.io/post/EP_WXT_data_analysis.html</guid><pubDate>Fri, 08 Aug 2025 02:16:22 +0000</pubDate></item></channel></rss>